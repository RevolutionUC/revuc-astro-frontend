---
interface Props {
  siteState: string;
}

const { siteState } = Astro.props; // for updating content depending on the stage of the hackathon
let title = "Revolution".toUpperCase();
let date = "   February  24-25".toUpperCase(); // Keep the space in order to match with the RevolutionUC Text
---

<!--- Post-register site --><!--- <section id="hero" class="h-screen flex flex-col justify-center items-center space-y-4 bg-black">
    <img src="/revuc_long_white.png" alt="RevolutionUC stylized text" class="w-[50vw] max-md:w-[70vw]" />
    <p class="text-white text-center text-2xl w-[50vw] max-lg:text-xl max-md:text-lg pb-6">Thank you all for participating in this year's RevolutionUC!</p>
    <button class="bg-blue-300 p-6 rounded-lg text-4xl max-lg:text-2xl max-lg:p-4 hover:bg-blue-400 transition-colors tracking-widest">View Submissions</button>
</section>
--->
<div id="hero" class="min-h-screen w-full flex justify-center items-center space-y-4 relative">
  <div id="landscape-grid" class="absolute inset-0"></div>
  <div class="z-10 absolute flex flex-col items-center w-[80vw] h-3/4 font-mono space-y-8">
    <div class="w-48 mt-12">
      <img id="logo" src="/favicon.png" alt="RevolutionUC 2024 logo" />
    </div>
    <div class="grid grid-cols-22 gap-2 w-4/5 desktop">
      {
        Array.from(title).map((letter) => {
          if (letter === " ") return <div />;
          return (
            <div
              class="row-span-2 col-span-2 text-6xl font-extrabold flex justify-center items-center border shadow-2xl backdrop-blur-sm transition-transform active:scale-[0.98] hover:scale-[1.02]"
              data-text={letter}
            >
              <span class="text-white">{letter}</span>
            </div>
          );
        })
      }
      <div
        class="row-span-2 col-span-2 border shadow-2xl backdrop-blur-sm p-2 transition-transform active:scale-[0.98] hover:scale-[1.02]"
      >
        <img id="uc-logo" src="/revuc_white.png" alt="The word UC stylized in the RevolutionUC font" class="relative -left-1" />
      </div>
      {
        Array.from(date).map((letter) => {
          if (letter === " ") return <div />;
          return (
            <div
              class="text-4xl font-extrabold flex justify-center items-center border shadow-2xl backdrop-blur-sm"
              data-text={letter}
            >
              <span class="text-white">{letter}</span>
            </div>
          );
        })
      }

      <div class="col-span-12 h-[2vw]"></div>
      <button
        id="register-button"
        class="col-start-8 col-span-8 text-white text-[3vw] tracking-widest font-extrabold border-2 flex justify-center items-center shadow-2xl backdrop-blur-sm transition-all active:scale-[0.99] hover:scale-[1.01] hover:bg-white hover:text-[#f75c03] hover:backdrop-blur-[6px] active:shadow-lg"
      >
        <span class="text-white">REGISTER</span>
      </button>
    </div>
  </div>
</div>

<style is:inline>
  #hero {
    background-image: linear-gradient(#d80368 -12%, #f75c03 100%);
  }
  #landscape-grid {
    background-size: 5vh 5vh, 80px 80px;
    background-image: linear-gradient(to bottom, #d80368 1.5px, transparent 1.5px),
      linear-gradient(to right, #d80368 1.5px, transparent 1.5px);
    animation: moveUp 15s linear infinite forwards;
  }
  @keyframes moveUp {
    0% {
      background-position: 0% 0%;
    }
    100% {
      background-position: 0% -100%;
    }
  }
</style>

<script defer>
  const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+{}|:<>?~`1234567890-=[]\\;',./";
  function glitchText(el, inpIters) {
    let iters = 0;
    let targetIters = inpIters || Math.floor(Math.random() * 40 + 20);
    if (el.innerText.length === 1) {
      const interval = setInterval(() => {
        el.innerText = alphabet[Math.floor(Math.random() * alphabet.length)];
        iters++;
        if (iters > targetIters) {
          clearInterval(interval);
          el.innerText = el.parentElement.getAttribute("data-text");
        }
      }, 40);
    } else {
      const originalText = el.innerText;
      const interval = setInterval(() => {
        el.innerText = el.innerText
          .split("")
          .map((_, index) => {
            if (index < iters) {
              return originalText[index];
            }
            return alphabet[Math.floor(Math.random() * alphabet.length)];
          })
          .join("");
        iters += 1 / 3;
        if (iters > el.innerText.length) {
          clearInterval(interval);
          el.innerText = originalText;
        }
      }, 40);
    }
  }
  /* // check if screen is desktop or mobile
  const isDesktop = window.matchMedia("(min-width: 1024px)").matches;

  // get all the text elements
  if (isDesktop) {
    const desktopText = document.querySelectorAll(
      ".desktop > [data-text] > span"
    );
    desktopText.forEach((el) => {
      glitchText(el);
      el.onmouseover = (event) => {
        glitchText(event.target, 20);
      };
    });
    const button = document.getElementById("register-button");
    glitchText(button);
  } else {
    const mobileText = document.querySelectorAll(
      ".mobile > [data-text] > span"
    );
    mobileText.forEach((el) => {
      glitchText(el);
      el.onmouseover = (event) => {
        glitchText(event.target, 20);
      };
    });
    const button = document.getElementById("register-button-mobile");
    glitchText(button);
  }

  // also glitch on resize
  window.addEventListener("resize", () => {
    const isDesktop = window.matchMedia("(min-width: 1024px)").matches;
    if (isDesktop) {
      const desktopText = document.querySelectorAll(
        ".desktop > [data-text] > span"
      );
      desktopText.forEach((el) => {
        el.onmouseover = (event) => {
          glitchText(event.target, 20);
        };
      });
    } else {
      const mobileText = document.querySelectorAll(
        ".mobile > [data-text] > span"
      );
      mobileText.forEach((el) => {
        el.onmouseover = (event) => {
          glitchText(event.target, 20);
        };
      });
    }
  }); */
  const desktopText = document.querySelectorAll(".desktop > [data-text] > span");
  desktopText.forEach((el) => {
    glitchText(el, 20); // Glitch text on page load
    el.onmouseover = (event) => {
      glitchText(event.target, 20);
    };
  });
  const button = document.getElementById("register-button");
  glitchText(button, 35); // Glitch button text on page load
</script>
