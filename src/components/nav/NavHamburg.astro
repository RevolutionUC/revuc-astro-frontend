---
interface Props {
  current: string;
}
const { current } = Astro.props;
const navLinks = {
  Home: "/",
  About: "/about",
  // Schedule: "/schedule",
  // Sponsors: "/sponsors",
  "Hack Ideas": "/hack-ideas",
  FAQ: "/faq",
};
---

<nav id="nav-hamburg" class="fixed top-0 z-30 w-full transition-colors duration-300 md:hidden">
  <a 
    id="mlh-trust-badge" 
    style="display:block;max-width:100px;min-width:60px;position:fixed;left:50px;top:0;width:10%;z-index:10000" 
    href="https://mlh.io/na?utm_source=na-hackathon&utm_medium=TrustBadge&utm_campaign=2025-season&utm_content=red" 
    target="_blank"
  >
    <img 
      src="https://s3.amazonaws.com/logged-assets/trust-badge/2025/mlh-trust-badge-2025-red.svg" 
      alt="Major League Hacking 2025 Hackathon Season" 
      style="width:100%"
    />
  </a>
  <div class="flex flex-row-reverse bg-transparent p-6">
    <svg
      id="hamburger"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      class="z-50 mr-4 h-8 w-8 cursor-pointer"
    >
      <path d="M4 18L20 18" stroke="#000000" stroke-width="2" stroke-linecap="round"></path>
      <path d="M4 12L20 12" stroke="#000000" stroke-width="2" stroke-linecap="round"></path>
      <path d="M4 6L20 6" stroke="#000000" stroke-width="2" stroke-linecap="round"></path>
    </svg>
  </div>
  <ul
    id="hamburger-panel"
    class="absolute top-0 z-40 flex h-screen w-full origin-top flex-col items-center gap-12 bg-white p-8 pt-32 text-center text-3xl transition-transform"
  >
    {
      /* map over the navLinks object and create a link for each key */
      Object.keys(navLinks).map((key) => {
        const link = navLinks[key as keyof typeof navLinks]; /* to make typescript happy */
        return (
          <li class="flex flex-col items-end justify-end">
            {
              /* if the current page is the same as the link, add the active class */
              current == key.toLowerCase() ? (
                <a class="after:block after:h-0.5 after:w-full after:bg-black" href={link}>
                  {key}
                </a>
              ) : (
                <a
                  class="opacity-75 after:block after:h-0.5 after:w-full after:origin-center after:scale-x-0 after:bg-black after:transition-transform hover:opacity-100 hover:after:scale-x-100"
                  href={link}
                >
                  {key}
                </a>
              )
            }
          </li>
        );
      })
    }
  </ul>
</nav>

<script defer define:vars={{ current }}>
  let isOpen = false;
  const hamburg = document.querySelector("#hamburger");
  const panel = document.querySelector("#hamburger-panel");
  const navHam = document.querySelector("#nav-hamburg");
  const hamburgPaths = document.querySelectorAll("#hamburger path");
  if (isOpen) {
    panel.style.transform = "scaleY(1)";
    hamburgPaths.forEach((path) => (path.style.stroke = "#000000"));
  } else {
    panel.style.transform = "scaleY(0)";
    hamburgPaths.forEach((path) => (path.style.stroke = "#FFFFFF"));
  }
  hamburg.addEventListener("click", () => {
    isOpen = !isOpen;
    if (isOpen) {
      panel.style.transform = "scaleY(1)";
      hamburgPaths.forEach((path) => (path.style.stroke = "#000000"));
    } else {
      panel.style.transform = "scaleY(0)";
      hamburgPaths.forEach((path) => (path.style.stroke = "#FFFFFF"));
    }
  });

  if (current !== "home") {
    navHam.style.backgroundColor = "#fc7b30";
  } else {
    window.addEventListener("scroll", () => {
      if (window.scrollY > window.innerHeight - 30) {
        navHam.style.backgroundColor = "#fc7b30";
      } else {
        navHam.style.backgroundColor = "transparent";
      }
    });
  }
</script>
